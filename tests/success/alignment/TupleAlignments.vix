type Tuple a b = MkTuple a b

type List a = Nil | Cons a (Ptr (List a))

map f (Ref (Cons x xs)) = Ref (Cons (f x) (map f xs))
map f (Ref Nil) = Ref Nil

boolToInt False = 0
boolToInt True = 1

main = map
  (\(MkTuple t sz). printInt (boolToInt (eqInt (alignmentOf t) sz)))
  (Ref (Cons (MkTuple (Tuple Byte Byte) (alignmentOf Byte))
  (Ref (Cons (MkTuple (Tuple Byte Int) (alignmentOf Int))
  (Ref (Cons (MkTuple (Tuple Int Byte) (alignmentOf Int))
  (Ref (Cons (MkTuple (Tuple Int Int) (alignmentOf Int))

  (Ref (Cons (MkTuple (Tuple Byte (Ptr Int)) (alignmentOf (Ptr Int)))
  (Ref (Cons (MkTuple (Tuple (Ptr Int) Byte) (alignmentOf (Ptr Int)))
  (Ref (Cons (MkTuple (Tuple (Ptr Int) (Ptr Int)) (alignmentOf (Ptr Int)))

  (Ref (Cons (MkTuple (Tuple (Tuple Byte Byte) Byte) (alignmentOf Byte))
  (Ref (Cons (MkTuple (Tuple Byte (Tuple Byte Byte)) (alignmentOf Byte))

  (Ref (Cons (MkTuple (Tuple (Tuple Byte Byte) Int) (alignmentOf Int))
  (Ref (Cons (MkTuple (Tuple Int (Tuple Byte Byte)) (alignmentOf Int))
  (Ref Nil)))))))))))))))))))))))
