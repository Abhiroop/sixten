type Tuple a b = MkTuple a b

type List a = Nil | Cons a (Ptr (List a))

map f (Ref (Cons x xs)) = Ref (Cons (f x) (map f xs))
map f (Ref Nil) = Ref Nil

boolToInt False = 0
boolToInt True = 1

main = map
  (\(MkTuple t sz). printInt (boolToInt (eqInt (sizeOf t) sz)))
  (Ref (Cons (MkTuple (Tuple Byte Byte) (addInt (sizeOf Byte) (sizeOf Byte)))
  (Ref (Cons (MkTuple (Tuple Byte Int) (addInt (sizeOf Int) (sizeOf Int)))
  (Ref (Cons (MkTuple (Tuple Int Byte) (addInt (sizeOf Int) (sizeOf Byte)))
  (Ref (Cons (MkTuple (Tuple Int Int) (addInt (sizeOf Int) (sizeOf Int)))

  (Ref (Cons (MkTuple (Tuple Byte (Ptr Int)) (addInt (sizeOf (Ptr Int)) (sizeOf (Ptr Int))))
  (Ref (Cons (MkTuple (Tuple (Ptr Int) Byte) (addInt (sizeOf (Ptr Int)) (sizeOf Byte)))
  (Ref (Cons (MkTuple (Tuple (Ptr Int) (Ptr Int)) (addInt (sizeOf (Ptr Int)) (sizeOf (Ptr Int))))

  (Ref (Cons (MkTuple (Tuple (Tuple Byte Byte) Byte) (addInt (addInt (sizeOf Byte) (sizeOf Byte)) (sizeOf Byte)))
  (Ref (Cons (MkTuple (Tuple Byte (Tuple Byte Byte)) (addInt (sizeOf Byte) (addInt (sizeOf Byte) (sizeOf Byte))))

  (Ref (Cons (MkTuple (Tuple (Tuple Byte Byte) Int) (addInt (sizeOf Int) (sizeOf Int)))
  (Ref (Cons (MkTuple (Tuple Int (Tuple Byte Byte)) (addInt (sizeOf Int) (addInt (sizeOf Byte) (sizeOf Byte))))
  (Ref Nil)))))))))))))))))))))))
