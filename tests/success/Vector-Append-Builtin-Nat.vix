type Unit = unit

type Tuple A B = tuple A B

addNat : Nat -> Nat -> Nat
addNat Zero n = n
addNat (Succ m) n = Succ (addNat m n)

Vector : Nat -> Type -> Type
Vector Zero _ = Unit
Vector (Succ n) a = Tuple a (Vector n a)

sum : forall n. Vector n Int -> Int
sum Zero unit = 0
sum (Succ n) (tuple x xs) = addInt x (sum n xs)

append : forall a m n. Vector m a -> Vector n a -> Vector (addNat m n) a
append _ Zero n unit ys = ys
append a (Succ m) n (tuple x xs) ys = tuple x (append a m n xs ys)

two = Succ (Succ Zero)
three = Succ (Succ (Succ Zero))

test = printInt (sum (addNat three two) (append Int three two (tuple 1 (tuple 2 (tuple 3 unit))) (tuple 12 (tuple 13 unit))))
