type List A = Nil | Cons A (Ptr (List A))

zipWith f (Ref Nil) _ = Ref Nil
zipWith f _ (Ref Nil) = Ref Nil
zipWith f (Ref (Cons x xs)) (Ref (Cons y ys)) = Ref (Cons (f x y) (zipWith f xs ys))

map f (Ref Nil) = Ref Nil
map f (Ref (Cons x xs)) = Ref (Cons (f x) (map f xs))

list1 = Ref (Cons 1 (Ref (Cons 2 (Ref (Cons 3 (Ref Nil))))))
list2 = Ref (Cons 10 (Ref (Cons 20 (Ref (Cons 30 (Ref Nil))))))

main1 = map printInt (zipWith addInt list1 list2)
