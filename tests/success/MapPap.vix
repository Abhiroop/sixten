deref : forall {t : Type}. Ptr t -> t
deref p = case p of Ref t -> t

the : (A : Type) -> A -> A
the _ a = a

data List (A : Type) where
  Nil : List A
  Cons : A -> Ptr (List A) -> List A

data List2 (A : Type) where
  Nil2 : List2 A
  Cons2 : A -> Ptr (List2 A) -> List2 A

tail : forall {A : Type}. Ptr (List A) -> Ptr (List A)
tail xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

tail2 xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

tail3 : forall {A}. Ptr (List A) -> Ptr (List A)
tail3 xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

map : forall {a b : Type}. (a -> b) -> Ptr (List a) -> Ptr (List b)
map f xs = Ref (case deref xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (map f xs'))

map2 f xs = Ref (case deref xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (map2 f xs'))

dumbId xs = case xs of
  Nil -> Nil
  Cons x xs' -> Cons x xs'

map3 f xs = case deref xs of
  Cons x xs' -> Ref (Cons (f x) (map3 f xs'))
  Nil -> Ref (the (List _) Nil)

map4 f xs = case deref xs of
  Cons x xs' -> Ref (Cons (f x) (map4 f xs'))
  Nil -> Ref Nil

testList : Ptr (List Int)
testList = Ref (Cons 1 (Ref (Cons 2 (Ref (Cons 3 (Ref Nil))))))

add3 : Int -> Int -> Int -> Int
add3 a b c = addInt (addInt a b) c

sum : Ptr (List Int) -> Int
sum xs = case deref xs of
  Nil -> 0
  Cons x xs' -> addInt x (sum xs')

print1 = printInt (sum (map (add3 1 2) testList))
print2 = printInt (sum (map (\f. f 2) (map (add3 1) testList)))
print3 = printInt (sum (map (\f. f 2) (map (\f. f 1) (map add3 testList))))
