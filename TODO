Type checking
  Better checking for escaped vars
  Sanity type-check the Abstract syntax
  Use a proper higher-order unification algorithm
Matching
  Coverage and overlap checking
  Parse and typecheck view patterns
  Pattern synonyms (just normalise function applications in patterns and see if it ends up with a pattern)
Codegen
  Arity inference
  Use llvm-hs for llvm
    Make a utility function that forward-declares everything undefined you use
Parsing
  Use megaparsec instead of trifecta?
  Error recovery
Compiler
  Make a TypeOf class and make typeOf pure?
  Make TypeRep a constructor and not a literal
  Add printing to compiler passes that are not VIX (make a MonadLog class?)
  Simplify/make consistent all the type synonyms
  Clean up MetaVar handling (not all modules need the full generality)
  Make code generation use VIX
  Try to get rid of zonking in normal TC operation
  Implement e.g. language server protocol
Error messages
  Write own error printer
  Make error message footnotes contain metavars
  Use prettyprinter library
Language
  * Pointer-align everything and revert (most of) the alignment stuff
  * Let(rec) definitions
  Named implicit arguments (maybe names should be mandatory?)
  Laziness
  * Type classes
    Overloaded literals
  Row polymorphism
    r : Row : Type
    {l = A} : {l : A} : Type
  Specialisation pragma
  Modules
    Re-exports
    Caching
  Mixfix definitions and noncompounds?
  * Inductive families
    Forcing
    Compute the representation of a type by pattern-matching on indices if possible, allowing the definition of e.g. flat vectors:
      type Vector n A where
        Nil : Vector 0 A
        Cons : forall {n}. A -> Vector n A -> Vector (S n) a
  FFI
    Make quasi quotes call back to Sixten and pass free vars as args
    Top-level extern declarations
    Use `opt -internalize-public-api-list` to internalize extern C decls
    Extern LLVM
  IO
  Mutable variables
Optimisations
  Make constructor tags smaller when possible
  Inlining
  Common subexpressions
  Tagged pointers
    Reorder data to enable more?
  Join point let bindings
Runtime
  Do real GC with LLVM gcroots etc
    Alternative: Bartlett's mostly copying
  Closures
    Store the arity as a bitfield where the highest set bit determines the
    arity, and the other bits determine the arguments of size 8
